<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shareholdergame.engine.account.dao.mapper.AccountMapper">

    <resultMap id="AccountResultMap" type="GamerAccount">
        <id column="gamer_id" property="id"/>
        <result column="email" property="email"/>
        <result column="user_name" property="userName"/>
        <result column="account_status" property="status"/>
        <result column="registration_date" property="creationDate"/>
        <result column="registered_from_ip" property="registeredFromIp"/>
        <result column="locale" property="language"/>
    </resultMap>

    <resultMap id="AccountWithPasswordResultMap" type="GamerAccount" extends="AccountResultMap">
        <result column="user_password" property="password"/>
    </resultMap>

    <select id="findByUniqueIds" parameterType="string" resultMap="AccountWithPasswordResultMap">
        select
            gamer_id,
            email,
            user_name,
            user_password,
            account_status,
            registration_date,
            registered_from_ip,
            locale
        from a_gamer_account
        where
            account_status != 'REMOVED_COMPLETELY'
            <if test="userNameOrEmail != null">
                and lower(user_name) like lower(#{userNameOrEmail}) or lower(email) like lower(#{userNameOrEmail})
            </if>
            <if test="gamerId">
                and gamer_id = #{gamerId}
            </if>
    </select>

    <select id="checkUserExistence" parameterType="map" resultType="long">
        select
            gamer_id
        from a_gamer_account
        where
            account_status != 'REMOVED_COMPLETELY'
            <if test="userNameOrEmail != null">
                and lower(user_name) like lower(#{userNameOrEmail}) or lower(email) like lower(#{userNameOrEmail})
            </if>
            <if test="gamerId">
                and gamer_id = #{gamerId}
            </if>
    </select>

    <insert id="insertAccount" parameterType="GamerAccount">
        insert into a_gamer_account (
          gamer_id,
          email,
          user_name,
          user_password,
          account_status,
          registration_date,
          registered_from_ip,
          locale
        )
        values (
          #{id},
          #{email},
          #{userName},
          #{password},
          #{status},
          #{creationDate},
          #{registeredFromIp},
          #{language}
        )
    </insert>

    <update id="updatePassword" parameterType="map">
        update a_gamer_account
        set user_password = #{password}
        where gamer_id = #{gamerId}
    </update>

    <update id="updateEmail" parameterType="map">
        update a_gamer_account
        set email = #{email}
        where gamer_id = #{gamerId}
    </update>

    <update id="updateUserName" parameterType="map">
        update a_gamer_account
        set user_name = #{userName}
        where gamer_id = #{gamerId}
    </update>

    <update id="updateStatus" parameterType="map">
        update a_gamer_account
        set account_status = #{status}
        where gamer_id = #{gamerId}
    </update>
</mapper>
